{"version":3,"sources":["modules/saved-jokes/data-access/api.ts","modules/saved-jokes/domain/store/types.ts","modules/saved-jokes/domain/store/actions.ts","AppContainer.tsx","common/presentation/global-styles/styles.ts","common/presentation/components/title/Styles.tsx","common/presentation/components/title/Title.tsx","common/data-access/http-client/axios-instance.ts","modules/jokes-dashboard/data-access/mapper.ts","common/data-access/http-client/cancel-tokens.ts","modules/jokes-dashboard/data-access/api.ts","modules/jokes-dashboard/domain/store/types.ts","modules/jokes-dashboard/domain/store/actions.ts","modules/jokes-dashboard/domain/store/selectors.ts","modules/saved-jokes/domain/store/selectors.ts","common/presentation/components/joke/Styles.tsx","common/presentation/components/joke/Joke.tsx","common/presentation/components/button/Styles.tsx","common/presentation/components/button/Button.tsx","modules/jokes-dashboard/presentation/jokes-dashboard/Styles.tsx","common/presentation/router/enums/route-paths.ts","modules/jokes-dashboard/presentation/jokes-dashboard/constants/jokes-fetching-timeout.ts","modules/jokes-dashboard/presentation/jokes-dashboard/JokesDashboard.tsx","modules/saved-jokes/presentation/saved-jokes/Styles.tsx","common/presentation/router/config/routes.ts","modules/saved-jokes/presentation/saved-jokes/SavedJokes.tsx","common/presentation/router/Router.tsx","modules/saved-jokes/domain/store/reducer.ts","modules/jokes-dashboard/domain/store/reducer.ts","common/domain/store/root-reducer.ts","common/environment/index.ts","common/domain/store/index.ts","common/providers/StoreProvider.tsx","App.tsx","index.tsx"],"names":["lsItemName","updateSavedJokes","jokes","localStorage","setItem","JSON","stringify","fetchSavedJokes","parse","getItem","addFavouriteJoke","joke","initialJokes","length","slice","removeFavouriteJoke","jokeId","filter","id","SAVE_JOKE","REMOVE_JOKE","SET_SAVED_JOKES","REMOVE_ALL_JOKES","setSavedJokes","type","saveJokeAsync","dispatch","a","saveJoke","removeJokeAsync","removeJoke","removeAllJokes","Wrapper","styled","div","AppContainer","children","useDispatch","initSavedJokes","savedJokes","useEffect","GlobalStyles","createGlobalStyle","TitleWrapper","Title","text","axiosInstance","axios","create","baseURL","mapper","response","data","iconUrl","icon_url","url","value","cancelTokens","list","cancel","tokenKey","CancelToken","source","routes","tokens","GET_RANDOM_JOKE","uuid","getRandomJoke","request","method","cancelToken","token","undefined","console","log","SET_RANDOM_JOKE","setRandomJoke","getActiveJoke","state","jokesDashboard","activeJoke","getSavedJokes","JokeWrapper","Joke","ButtonWrapper","disabled","Button","className","onClick","routePaths","TopRow","Buttons","intervalId","Jokes","JokeCol","JokeContainer","DeleteButton","path","SAVED_JOKES","component","useSelector","to","JOKES_DASHBOARD","map","i","useState","isJokeFetching","setIsJokeFetching","jokesFetchingInterval","setJokesFetchingInterval","isJokeAddedInFavourite","useMemo","find","handleGetJoke","isCancel","handleStartGettingJokes","interval","setInterval","handleStopGettingJokes","clearInterval","handleAddToFavourite","handleRemoveFromFavourite","Router","route","render","initialState","Environments","rootReducer","combineReducers","action","APPLICATION_ENVIRONMENT","process","middleware","PRODUCTION","applyMiddleware","thunk","composeWithDevTools","store","createStore","StoreProvider","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"yNAEaA,EAAa,QAE1B,SAASC,EAAiBC,GACxBC,aAAaC,QAAQJ,EAAYK,KAAKC,UAAUJ,IAG3C,SAASK,IACd,OAAOF,KAAKG,MAAML,aAAaM,QAAQT,IAAe,MAGjD,SAASU,EAAiBC,GAC/B,IAAMC,EAAeL,IAKrBN,EAHEW,EAAaC,OAAS,GAAtB,sBACQD,GADR,CACsBD,IADtB,sBAEQC,EAAaE,MAAM,IAF3B,CAE+BH,KAI5B,SAASI,EAAoBC,GAElCf,EADcM,IAAkBU,QAAO,SAACN,GAAD,OAAUA,EAAKO,KAAOF,MCpBxD,IAAMG,EAAY,YACZC,EAAc,cACdC,EAAkB,kBAClBC,EAAmB,mBCmBnBC,EAAgB,SAACrB,GAAD,MAAmC,CAC9DsB,KAAMH,EACNnB,UAGWuB,EAAgB,SAACd,GAAD,8CAA0B,WAAOe,GAAP,SAAAC,EAAA,sEAC/CjB,EAAiBC,GAD8B,OAErDe,EAASE,EAASjB,IAFmC,2CAA1B,uDAKhBkB,EAAkB,SAACb,GAAD,8CAA8B,WAC3DU,GAD2D,SAAAC,EAAA,sEAGrDZ,EAAoBC,GAHiC,OAI3DU,EAASI,EAAWd,IAJuC,2CAA9B,uDAYlBe,EAAiB,iBAAuB,CACnDP,KAAMF,IAGKM,EAAW,SAACjB,GAAD,MAA2B,CACjDa,KAAML,EACNR,SAGWmB,EAAa,SAACd,GAAD,MAAiC,CACzDQ,KAAMJ,EACNJ,W,2IChDF,IAAMgB,EAAUC,IAAOC,IAAV,KAMAC,EAA0B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAClCV,EAAWW,cAEXC,EAAc,uCAAG,sBAAAX,EAAA,sEACfD,EDA0B,uCAAgB,WAAOA,GAAP,eAAAC,EAAA,sEACzBpB,IADyB,OAC5CgC,EAD4C,OAElDb,EAASH,EAAcgB,IAF2B,2CAAhB,uDCDX,2CAAH,qDAQpB,OAJAC,qBAAU,WACRF,MACC,IAEI,cAACN,EAAD,UAAUI,K,ugBCxBZ,IAAMK,EAAeC,YAAH,K,oKCAlB,IAAMC,EAAeV,IAAOC,IAAV,KCKZU,EAAmB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KACjC,OAAO,cAACF,EAAD,UAAeE,K,iBCJXC,EAAgBC,IAAMC,OAAO,CACxCC,QAHqB,gCCCVC,EACI,CACbC,SADa,SACJC,GACP,MAAO,CACLC,QAASD,EAAKE,SACdC,IAAKH,EAAKG,IACVrC,GAAIkC,EAAKlC,GACTsC,MAAOJ,EAAKI,S,QCHPC,EAA6B,CACxCC,KAAM,GAENC,OAHwC,SAGjCC,GACDH,EAAaC,MAAQE,KAAYH,EAAaC,KAC5CD,EAAaC,KAAKE,IAEpBH,EAAaC,KAAKE,GAAWD,SAG/BF,EAAaC,KAAKE,GAAY,KAEhCH,EAAaC,KAAKE,GAAYb,IAAMc,YAAYC,WCb9CC,EACS,eAGTC,EAAS,CACbC,gBAAiBC,eAGZ,SAAeC,IAAtB,+B,4CAAO,gCAAAxC,EAAA,6DACL8B,EAAaE,OAAOK,EAAOC,iBADtB,kBAGoBnB,EAAcsB,QAAQ,CAC3CC,OAAQ,MACRd,IAAKQ,EACLO,aAAa,UAAAb,EAAaC,KAAKM,EAAOC,wBAAzB,eAA2CM,aAASC,IANhE,uBAGKpB,EAHL,EAGKA,KAHL,kBAQIF,EAAqBC,SAASC,IARlC,sCAUHqB,QAAQC,IAAI,0BACZD,QAAQC,IAAR,MAXG,+D,sBCZA,IAAMC,EAAkB,kBCelBC,EAAgB,SAACjE,GAAD,MAAgC,CAC3Da,KAAMmD,EACNhE,SChBWkE,EAAgB,SAACC,GAC5B,OAAOA,EAAMC,eAAeC,YCDjBC,GAAgB,SAACH,GAC5B,OAAOA,EAAMvC,WAAWA,Y,4ICFnB,IAAM2C,GAAcjD,IAAOC,IAAV,MCKXiD,GAAkB,SAAC,GAAqB,IAAnBtC,EAAkB,EAAlBA,KAChC,OAAO,cAACqC,GAAD,UAAcrC,K,sOCNhB,IAAMuC,GAAgBnD,IAAOC,IAAV,MACJ,qBAAGmD,SACV,OAAS,aAMJ,qBAAGA,SAAmC,OAAS,MCCtDC,GAAoB,SAAC,GAKpB,IAJZC,EAIW,EAJXA,UACAnD,EAGW,EAHXA,SACAiD,EAEW,EAFXA,SACAG,EACW,EADXA,QAEA,OACE,cAACJ,GAAD,CAAeG,UAAWA,EAAWC,QAASA,EAASH,SAAUA,EAAjE,SACGjD,K,2kBChBA,ICHKqD,GDGCC,GAASzD,IAAOC,IAAV,MAONgD,GAAcjD,IAAOC,IAAV,MAMXyD,GAAU1D,IAAOC,IAAV,MAKPkD,GAAgBnD,YAAOqD,GAAPrD,CAAH,O,SCrBdwD,K,oBAAAA,E,sBAAAA,Q,KCAL,ICgBHG,QAAiCpB,E,8mCCd9B,IAAMkB,GAASzD,IAAOC,IAAV,MAON2D,GAAQ5D,IAAOC,IAAV,MAOL4D,GAAU7D,IAAOC,IAAV,MASPgD,GAAcjD,IAAOC,IAAV,MASX6D,GAAgB9D,IAAOC,IAAV,MAKb8D,GAAe/D,IAAOC,IAAV,MClCZ6B,GAAkB,CAC7B,CACEkC,KAAMR,GAAWS,YACjBC,UCa0B,WAC5B,IAAMzE,EAAWW,cACXE,EAAa6D,YAAYnB,IAU/B,OACE,qCACE,eAAC,GAAD,WACE,cAAC,EAAD,CAAOpC,KAAK,oBACZ,cAAC,IAAD,CAAMwD,GAAIZ,GAAWa,gBAArB,kCAEF,cAACT,GAAD,UACGtD,EAAWgE,KAAI,SAAC5F,EAAM6F,GAAP,OACd,cAACV,GAAD,UACE,eAAC,GAAD,WACE,cAACC,GAAD,UACE,cAAC,GAAD,CAAMlD,KAAMlC,EAAK6C,UAEnB,cAACwC,GAAD,CACER,QAAS,WAlBE,IAACxE,IAmBOL,EAAKO,GAlBpCQ,EAASG,EAAgBb,KAgBf,wBALUwF,UAgBfjE,EAAW1B,QACZ,cAAC,GAAD,CAAQ2E,QAjCc,WAC1B9D,EvBe+B,uCAAgB,WAAOA,GAAP,SAAAC,EAAA,2EFdjD1B,EAAiB,IEcgC,OAEjDyB,EAASK,KAFwC,2CAAhB,wDuBiB3B,wCDhDN,CACEkE,KAAMR,GAAWa,gBACjBH,UFM8B,WAChC,IAAMzE,EAAWW,cACX2C,EAAaoB,YAAYvB,GACzBtC,EAAa6D,YAAYnB,IAHO,EAIMwB,oBAAS,GAJf,mBAI/BC,EAJ+B,KAIfC,EAJe,OAKoBF,wBAExDjC,GAPoC,mBAK/BoC,EAL+B,KAKRC,EALQ,KAShCC,EAAyBC,mBAAQ,WACrC,QACI/B,KACAzC,EAAWyE,MAAK,SAACrG,GAAD,OAAUA,EAAK6C,QAAUwB,EAAWxB,WAEvD,CAACjB,EAAYyC,IAEViC,EAAa,uCAAG,sBAAAtF,EAAA,sDACpBgF,GAAkB,GAClBjF,EV9B2B,uCAAgB,WAAOA,GAAP,eAAAC,EAAA,+EAExBwC,IAFwB,OAErCxD,EAFqC,OAG3Ce,EAASkD,EAAcjE,IAHoB,gDAKvCoC,IAAMmE,SAAN,OACFzC,QAAQC,IAAI,sBAN6B,yDAAhB,uDU+B3BiC,GAAkB,GAHE,2CAAH,qDAMbQ,EAAuB,uCAAG,4BAAAxF,EAAA,sDACxByF,EAAWC,aAAY,WAC3BJ,MD1C8B,KC4ChCrB,GAAawB,EACbP,EAAyBO,GALK,2CAAH,qDAQvBE,EAAsB,uCAAG,sBAAA3F,EAAA,sDAC7B4F,cAAc3B,IACdiB,OAAyBrC,GAFI,2CAAH,qDAKtBgD,EAAoB,uCAAG,sBAAA7F,EAAA,yDACtBqD,EADsB,iDAI3BtD,EAASD,EAAcuD,IAJI,2CAAH,qDAOpByC,EAAyB,uCAAG,sBAAA9F,EAAA,yDAC3BqD,EAD2B,iDAIhCtD,EAASG,EAAgBmD,EAAW9D,KAJJ,2CAAH,qDAa/B,OANAsB,qBAAU,WACR,OAAO,WACL8E,OAED,IAGD,qCACE,eAAC5B,GAAD,WACE,cAAC,EAAD,CAAO7C,KAAK,oBACZ,cAAC,IAAD,CAAMwD,GAAIZ,GAAWS,YAArB,mCAEF,cAAC,GAAD,UACE,cAAC,GAAD,CACErD,KACE6D,EACI,YACU,OAAV1B,QAAU,IAAVA,OAAA,EAAAA,EAAYxB,QAAS,uCAI/B,eAACmC,GAAD,WACE,cAAC,GAAD,CAAeH,QAASyB,EAAe5B,SAAUqB,EAAjD,sBAGEE,EAKA,cAAC,GAAD,CAAepB,QAAS8B,EAAxB,gCAJA,cAAC,GAAD,CAAe9B,QAAS2B,EAAxB,iCAQDL,EACC,cAAC,GAAD,CAAetB,QAASiC,EAAxB,mCAIA,cAAC,GAAD,CAAejC,QAASgC,EAAxB,uCIrGGE,GAAa,WACxB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACG3D,GAAOwC,KAAI,SAACoB,GAAD,OACV,cAAC,IAAD,CAEE1B,KAAM0B,EAAM1B,KACZ2B,OAAQ,kBAAM,cAACD,EAAMxB,UAAP,MAFTwB,EAAM1B,SAKf,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,IAAD,CAAUI,GAAIZ,GAAWa,0B,SCR7BuB,GAAgC,CACpCtF,WAAY,ICJP,IAAMsF,GAAoC,CAC/C7C,gBAAYR,GCHP,ICJFsD,GDIQC,GAAcC,2BAAgB,CACzCzF,WFQK,SAASA,IAGI,IAFlBuC,EAEiB,uDAFQ+C,GACzBI,EACiB,uCACjB,OAAQA,EAAOzG,MACb,KAAKH,EACH,MAAO,CACLkB,WAAY0F,EAAO/H,OAEvB,KAAKiB,EACH,MAAO,CACLoB,WACEA,EAAW1B,OAAS,GAApB,sBACQiE,EAAMvC,YADd,CAC0B0F,EAAOtH,OADjC,sBAEQmE,EAAMvC,WAAWzB,MAAM,IAF/B,CAEmCmH,EAAOtH,QAEhD,KAAKS,EACH,MAAO,CACLmB,WAAYuC,EAAMvC,WAAWtB,QAAO,SAACN,GAAD,OAAUA,EAAKO,KAAO+G,EAAOjH,WAGrE,KAAKM,EACH,MAAO,CACLiB,WAAY,IAEhB,QACE,OAAOuC,IEjCXC,eDIK,WAGiB,IAFtBD,EAEqB,uDAFQ+C,GAC7BI,EACqB,uCACrB,OAAQA,EAAOzG,MACb,KAAKmD,EACH,MAAO,CACLK,WAAYiD,EAAOtH,MAGvB,QACE,OAAOmE,M,4BErBRgD,K,wBAAAA,E,2BAAAA,Q,KAKL,IAAMI,GAA0BC,aCChC,IAAMC,GDEGN,GAAaO,aAAeH,GCDjCI,2BAAgBC,MAChBC,+BAAoBF,2BAAgBC,OAE3BE,GAAQC,uBAAYX,GAAaK,ICFjCO,GAA2B,SAAC,GAAyB,IAAvBvG,EAAsB,EAAtBA,SACzC,OAAO,cAAC,IAAD,CAAUqG,MAAOA,GAAjB,SAAyBrG,KCHrBwG,GAAU,WACrB,OACE,cAAC,GAAD,UACE,eAAC,EAAD,WACE,cAAC,GAAD,IACA,cAACnG,EAAD,UCPRoG,IAASjB,OACP,cAAC,IAAMkB,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ac3db5b5.chunk.js","sourcesContent":["import { Joke } from '../../../common/domain/interfaces/joke.interface';\n\nexport const lsItemName = 'jokes';\n\nfunction updateSavedJokes(jokes: Joke[]): void {\n  localStorage.setItem(lsItemName, JSON.stringify(jokes));\n}\n\nexport function fetchSavedJokes(): Joke[] {\n  return JSON.parse(localStorage.getItem(lsItemName) || '[]');\n}\n\nexport function addFavouriteJoke(joke: Joke): void {\n  const initialJokes = fetchSavedJokes();\n  const jokes =\n    initialJokes.length < 10\n      ? [...initialJokes, joke]\n      : [...initialJokes.slice(1), joke];\n  updateSavedJokes(jokes);\n}\n\nexport function removeFavouriteJoke(jokeId: string): void {\n  const jokes = fetchSavedJokes().filter((joke) => joke.id !== jokeId);\n  updateSavedJokes(jokes);\n}\n\nexport function removeAllFavouriteJokes(): void {\n  updateSavedJokes([]);\n}\n","import { Joke } from '../../../../common/domain/interfaces/joke.interface';\n\nexport const SAVE_JOKE = 'SAVE_JOKE';\nexport const REMOVE_JOKE = 'REMOVE_JOKE';\nexport const SET_SAVED_JOKES = 'SET_SAVED_JOKES';\nexport const REMOVE_ALL_JOKES = 'REMOVE_ALL_JOKES';\n\nexport interface SaveJoke {\n  type: typeof SAVE_JOKE;\n  joke: Joke;\n}\n\nexport interface SetSavedJokes {\n  type: typeof SET_SAVED_JOKES;\n  jokes: Joke[];\n}\n\nexport interface RemoveJoke {\n  type: typeof REMOVE_JOKE;\n  jokeId: string;\n}\n\nexport interface RemoveAllJokes {\n  type: typeof REMOVE_ALL_JOKES;\n}\n\nexport type SavedJokesAction =\n  | RemoveJoke\n  | SaveJoke\n  | SetSavedJokes\n  | RemoveAllJokes;\n\nexport interface SavedJokesState {\n  savedJokes: Joke[];\n}\n","import { Joke } from '../../../../common/domain/interfaces/joke.interface';\nimport { AppThunk } from '../../../../common/domain/store';\nimport {\n  fetchSavedJokes,\n  addFavouriteJoke,\n  removeFavouriteJoke,\n  removeAllFavouriteJokes\n} from '../../data-access/api';\nimport {\n  RemoveAllJokes,\n  RemoveJoke,\n  REMOVE_ALL_JOKES,\n  REMOVE_JOKE,\n  SaveJoke,\n  SAVE_JOKE,\n  SetSavedJokes,\n  SET_SAVED_JOKES\n} from './types';\n\nexport const fetchSavedJokesAsync = (): AppThunk => async (dispatch) => {\n  const savedJokes = await fetchSavedJokes();\n  dispatch(setSavedJokes(savedJokes));\n};\n\nexport const setSavedJokes = (jokes: Joke[]): SetSavedJokes => ({\n  type: SET_SAVED_JOKES,\n  jokes\n});\n\nexport const saveJokeAsync = (joke: Joke): AppThunk => async (dispatch) => {\n  await addFavouriteJoke(joke);\n  dispatch(saveJoke(joke));\n};\n\nexport const removeJokeAsync = (jokeId: string): AppThunk => async (\n  dispatch\n) => {\n  await removeFavouriteJoke(jokeId);\n  dispatch(removeJoke(jokeId));\n};\n\nexport const removeAllJokesAsync = (): AppThunk => async (dispatch) => {\n  await removeAllFavouriteJokes();\n  dispatch(removeAllJokes());\n};\n\nexport const removeAllJokes = (): RemoveAllJokes => ({\n  type: REMOVE_ALL_JOKES\n});\n\nexport const saveJoke = (joke: Joke): SaveJoke => ({\n  type: SAVE_JOKE,\n  joke\n});\n\nexport const removeJoke = (jokeId: string): RemoveJoke => ({\n  type: REMOVE_JOKE,\n  jokeId\n});\n","import React, { FC, ReactNode, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { fetchSavedJokesAsync } from './modules/saved-jokes/domain/store/actions';\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const AppContainer: FC<Props> = ({ children }: Props) => {\n  const dispatch = useDispatch();\n\n  const initSavedJokes = async (): Promise<void> => {\n    await dispatch(fetchSavedJokesAsync());\n  };\n\n  useEffect(() => {\n    initSavedJokes();\n  }, []);\n\n  return <Wrapper>{children}</Wrapper>;\n};\n\nexport default AppContainer;\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    font-family: 'Arial';\n    font-size: 14px;\n    color: #333;\n  }\n\n  li, ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n  \n  input, textarea {\n    outline: none;\n  }\n  \n  button {\n    border: 0;\n    outline: none;\n  }\n  \n  html, body {\n    margin: 0;\n    padding: 0;\n    background: #F5F6FA;\n    width: 100%;\n  }\n\n  #root {\n    margin: 16px;\n  }\n  \n  * {\n    box-sizing: border-box;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const TitleWrapper = styled.div`\n  font-size: 24px;\n  color: #3aabe2;\n  font-family: 'Courier New';\n`;\n","import React, { FC } from 'react';\nimport { TitleWrapper } from './Styles';\n\ninterface Props {\n  text: string;\n}\n\nexport const Title: FC<Props> = ({ text }: Props) => {\n  return <TitleWrapper>{text}</TitleWrapper>;\n};\n","import axios from 'axios';\n\nexport const baseURL = 'https://api.chucknorris.io/';\n\nexport const axiosInstance = axios.create({\n  baseURL\n});\n","import { JokeDTO } from '../../../common/data-access/interfaces/jokeDTO';\nimport { Joke } from '../../../common/domain/interfaces/joke.interface';\n\nexport const mapper = {\n  getRandomJoke: {\n    response(data: JokeDTO): Joke {\n      return {\n        iconUrl: data.icon_url,\n        url: data.url,\n        id: data.id,\n        value: data.value\n      };\n    }\n  }\n};\n","import axios, { CancelTokenSource } from 'axios';\n\ninterface CancelTokens {\n  list: Record<string, CancelTokenSource | null>;\n  cancel(tokenKey: string): void;\n}\n\nexport const cancelTokens: CancelTokens = {\n  list: {},\n\n  cancel(tokenKey: string): void {\n    if (cancelTokens.list && tokenKey in cancelTokens.list) {\n      if (cancelTokens.list[tokenKey]) {\n        //eslint-disable-next-line\n        cancelTokens.list[tokenKey]!.cancel();\n      }\n    } else {\n      cancelTokens.list[tokenKey] = null;\n    }\n    cancelTokens.list[tokenKey] = axios.CancelToken.source();\n  }\n};\n","import { axiosInstance } from '../../../common/data-access/http-client/axios-instance';\nimport { mapper } from './mapper';\nimport { v4 as uuid } from 'uuid';\nimport { cancelTokens } from '../../../common/data-access/http-client/cancel-tokens';\nimport { Joke } from '../../../common/domain/interfaces/joke.interface';\n\nconst routes = {\n  RANDOM_JOKE: 'jokes/random'\n};\n\nconst tokens = {\n  GET_RANDOM_JOKE: uuid()\n};\n\nexport async function getRandomJoke(): Promise<Joke> {\n  cancelTokens.cancel(tokens.GET_RANDOM_JOKE);\n  try {\n    const { data } = await axiosInstance.request({\n      method: 'GET',\n      url: routes.RANDOM_JOKE,\n      cancelToken: cancelTokens.list[tokens.GET_RANDOM_JOKE]?.token || undefined\n    });\n    return mapper.getRandomJoke.response(data);\n  } catch (e) {\n    console.log('Error in getRandomJoke');\n    console.log(e);\n    throw e;\n  }\n}\n","import { Joke } from '../../../../common/domain/interfaces/joke.interface';\n\nexport const SET_RANDOM_JOKE = 'SET_RANDOM_JOKE';\n\nexport interface SetRandomJoke {\n  type: typeof SET_RANDOM_JOKE;\n  joke: Joke;\n}\n\nexport type JokesDashboardAction = SetRandomJoke;\n\nexport interface JokesDashboardState {\n  activeJoke: Joke | undefined;\n}\n","import { Joke } from '../../../../common/domain/interfaces/joke.interface';\nimport { AppThunk } from '../../../../common/domain/store';\nimport { getRandomJoke } from '../../data-access/api';\nimport { SetRandomJoke, SET_RANDOM_JOKE } from './types';\nimport axios from 'axios';\n\nexport const fetchActiveJoke = (): AppThunk => async (dispatch) => {\n  try {\n    const joke = await getRandomJoke();\n    dispatch(setRandomJoke(joke));\n  } catch (e) {\n    if (axios.isCancel(e)) {\n      console.log('Request cancelled ');\n    }\n  }\n};\n\nexport const setRandomJoke = (joke: Joke): SetRandomJoke => ({\n  type: SET_RANDOM_JOKE,\n  joke\n});\n","import { Joke } from '../../../../common/domain/interfaces/joke.interface';\nimport { TRootState } from '../../../../common/domain/store/root-reducer';\n\nexport const getActiveJoke = (state: TRootState): Joke | undefined => {\n  return state.jokesDashboard.activeJoke;\n};\n","import { Joke } from '../../../../common/domain/interfaces/joke.interface';\nimport { TRootState } from '../../../../common/domain/store/root-reducer';\n\nexport const getSavedJokes = (state: TRootState): Joke[] => {\n  return state.savedJokes.savedJokes;\n};\n","import styled from 'styled-components';\n\nexport const JokeWrapper = styled.div`\n  font-size: 16px;\n  color: #333;\n  font-family: 'Courier New';\n`;\n","import React, { FC } from 'react';\nimport { JokeWrapper } from './Styles';\n\ninterface Props {\n  text: string;\n}\n\nexport const Joke: FC<Props> = ({ text }: Props) => {\n  return <JokeWrapper>{text}</JokeWrapper>;\n};\n","import styled from 'styled-components';\n\nexport const ButtonWrapper = styled.div<{ disabled?: boolean }>`\n  background-color: ${({ disabled }): string =>\n    disabled ? 'gray' : '#ff5b24'};\n  padding: 10px 20px;\n  cursor: pointer;\n  font-family: 'Arial';\n  color: #fff;\n  text-align: center;\n  pointer-events: ${({ disabled }): string => (disabled ? 'none' : '')};\n`;\n","import React, { FC, ReactNode } from 'react';\nimport { StringLiteral } from 'typescript';\nimport { ButtonWrapper } from './Styles';\n\ninterface Props {\n  children: ReactNode;\n  disabled?: boolean;\n  onClick?(): void;\n  className?: string;\n}\n\nexport const Button: FC<Props> = ({\n  className,\n  children,\n  disabled,\n  onClick\n}: Props) => {\n  return (\n    <ButtonWrapper className={className} onClick={onClick} disabled={disabled}>\n      {children}\n    </ButtonWrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { Button } from '../../../../common/presentation/components/button/Button';\n\nexport const TopRow = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n`;\n\nexport const JokeWrapper = styled.div`\n  padding: 24px 12px;\n  border: 1px solid #3aabe2;\n  margin-bottom: 16px;\n`;\n\nexport const Buttons = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ButtonWrapper = styled(Button)`\n  margin-bottom: 10px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n","export enum routePaths {\n  JOKES_DASHBOARD = '/',\n  SAVED_JOKES = '/saved'\n}\n","export const jokesFetchingTimeout = 3000;\n","import React, { FC, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Title } from '../../../../common/presentation/components/title/Title';\nimport { fetchActiveJoke } from '../../domain/store/actions';\nimport { getActiveJoke } from '../../domain/store/selectors';\nimport {\n  removeJokeAsync,\n  saveJokeAsync\n} from '../../../saved-jokes/domain/store/actions';\nimport { getSavedJokes } from '../../../saved-jokes/domain/store/selectors';\nimport { Joke } from '../../../../common/presentation/components/joke/Joke';\nimport { TopRow, Buttons, ButtonWrapper, JokeWrapper } from './Styles';\nimport { routePaths } from '../../../../common/presentation/router/enums/route-paths';\nimport { jokesFetchingTimeout } from './constants/jokes-fetching-timeout';\n\nlet intervalId: number | undefined = undefined;\n\nexport const JokesDashboard: FC = () => {\n  const dispatch = useDispatch();\n  const activeJoke = useSelector(getActiveJoke);\n  const savedJokes = useSelector(getSavedJokes);\n  const [isJokeFetching, setIsJokeFetching] = useState(false);\n  const [jokesFetchingInterval, setJokesFetchingInterval] = useState<\n    undefined | number\n  >(undefined);\n\n  const isJokeAddedInFavourite = useMemo((): boolean => {\n    return (\n      !!activeJoke &&\n      !!savedJokes.find((joke) => joke.value === activeJoke.value)\n    );\n  }, [savedJokes, activeJoke]);\n\n  const handleGetJoke = async (): Promise<void> => {\n    setIsJokeFetching(true);\n    dispatch(fetchActiveJoke());\n    setIsJokeFetching(false);\n  };\n\n  const handleStartGettingJokes = async (): Promise<void> => {\n    const interval = setInterval(() => {\n      handleGetJoke();\n    }, jokesFetchingTimeout);\n    intervalId = interval;\n    setJokesFetchingInterval(interval);\n  };\n\n  const handleStopGettingJokes = async (): Promise<void> => {\n    clearInterval(intervalId);\n    setJokesFetchingInterval(undefined);\n  };\n\n  const handleAddToFavourite = async (): Promise<void> => {\n    if (!activeJoke) {\n      return;\n    }\n    dispatch(saveJokeAsync(activeJoke));\n  };\n\n  const handleRemoveFromFavourite = async (): Promise<void> => {\n    if (!activeJoke) {\n      return;\n    }\n    dispatch(removeJokeAsync(activeJoke.id));\n  };\n\n  useEffect(() => {\n    return () => {\n      handleStopGettingJokes();\n    };\n  }, []);\n\n  return (\n    <>\n      <TopRow>\n        <Title text=\"Get Random Joke\"></Title>\n        <Link to={routePaths.SAVED_JOKES}>To Favourite Jokes</Link>\n      </TopRow>\n      <JokeWrapper>\n        <Joke\n          text={\n            isJokeFetching\n              ? 'Fetching'\n              : activeJoke?.value || 'Сlick on one of the buttons'\n          }\n        ></Joke>\n      </JokeWrapper>\n      <Buttons>\n        <ButtonWrapper onClick={handleGetJoke} disabled={isJokeFetching}>\n          Get Joke\n        </ButtonWrapper>\n        {!jokesFetchingInterval ? (\n          <ButtonWrapper onClick={handleStartGettingJokes}>\n            Start Getting Jokes\n          </ButtonWrapper>\n        ) : (\n          <ButtonWrapper onClick={handleStopGettingJokes}>\n            Stop Getting Jokes\n          </ButtonWrapper>\n        )}\n        {isJokeAddedInFavourite ? (\n          <ButtonWrapper onClick={handleRemoveFromFavourite}>\n            Remove from Favourite\n          </ButtonWrapper>\n        ) : (\n          <ButtonWrapper onClick={handleAddToFavourite}>\n            Add to Favourite\n          </ButtonWrapper>\n        )}\n      </Buttons>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const TopRow = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n`;\n\nexport const Jokes = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -10px;\n  margin-bottom: 16px;\n`;\n\nexport const JokeCol = styled.div`\n  padding: 0 10px;\n  width: 33.33%;\n\n  @media (max-width: 1100px) {\n    width: 100%;\n  }\n`;\n\nexport const JokeWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border: 1px solid #3aabe2;\n  margin-bottom: 10px;\n  padding: 0 10px;\n`;\n\nexport const JokeContainer = styled.div`\n  padding: 10px;\n  padding-left: 0;\n`;\n\nexport const DeleteButton = styled.div`\n  height: 100%;\n  width: 72px;\n  min-width: 72px;\n  cursor: pointer;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 6px;\n  color: #fff;\n  background-color: #3aabe2;\n`;\n","import { JokesDashboard } from '../../../../modules/jokes-dashboard/presentation/jokes-dashboard/JokesDashboard';\nimport { SavedJokes } from '../../../../modules/saved-jokes/presentation/saved-jokes/SavedJokes';\nimport { routePaths } from '../enums/route-paths';\nimport { Route } from '../interfaces/route.interface';\n\nexport const routes: Route[] = [\n  {\n    path: routePaths.SAVED_JOKES,\n    component: SavedJokes\n  },\n  {\n    path: routePaths.JOKES_DASHBOARD,\n    component: JokesDashboard\n  }\n];\n","import React, { FC } from 'react';\nimport { Title } from '../../../../common/presentation/components/title/Title';\nimport { routePaths } from '../../../../common/presentation/router/enums/route-paths';\nimport {\n  DeleteButton,\n  Jokes,\n  JokeWrapper,\n  TopRow,\n  JokeContainer,\n  JokeCol\n} from './Styles';\nimport { Link } from 'react-router-dom';\nimport { Button } from '../../../../common/presentation/components/button/Button';\nimport { Joke } from '../../../../common/presentation/components/joke/Joke';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getSavedJokes } from '../../domain/store/selectors';\nimport {\n  removeAllJokesAsync,\n  removeJokeAsync\n} from '../../domain/store/actions';\n\nexport const SavedJokes: FC = () => {\n  const dispatch = useDispatch();\n  const savedJokes = useSelector(getSavedJokes);\n\n  const handleClearAllJokes = (): void => {\n    dispatch(removeAllJokesAsync());\n  };\n\n  const handleDeleteJoke = (jokeId: string): void => {\n    dispatch(removeJokeAsync(jokeId));\n  };\n\n  return (\n    <>\n      <TopRow>\n        <Title text=\"Favourite Jokes\"></Title>\n        <Link to={routePaths.JOKES_DASHBOARD}>Back to Dashboard</Link>\n      </TopRow>\n      <Jokes>\n        {savedJokes.map((joke, i) => (\n          <JokeCol key={i}>\n            <JokeWrapper>\n              <JokeContainer>\n                <Joke text={joke.value}></Joke>\n              </JokeContainer>\n              <DeleteButton\n                onClick={(): void => {\n                  handleDeleteJoke(joke.id);\n                }}\n              >\n                Delete\n              </DeleteButton>\n            </JokeWrapper>\n          </JokeCol>\n        ))}\n      </Jokes>\n      {!!savedJokes.length && (\n        <Button onClick={handleClearAllJokes}>Clear Favourite Jokes</Button>\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { routes } from './config/routes';\nimport { routePaths } from './enums/route-paths';\n\nexport const Router: FC = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        {routes.map((route) => (\n          <Route\n            key={route.path}\n            path={route.path}\n            render={() => <route.component />}\n          />\n        ))}\n        <Route path=\"*\">\n          <Redirect to={routePaths.JOKES_DASHBOARD} />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n","import {\n  SET_SAVED_JOKES,\n  REMOVE_JOKE,\n  SavedJokesAction,\n  SavedJokesState,\n  SAVE_JOKE,\n  REMOVE_ALL_JOKES\n} from './types';\n\nconst initialState: SavedJokesState = {\n  savedJokes: []\n};\n\nexport function savedJokes(\n  state: SavedJokesState = initialState,\n  action: SavedJokesAction\n): SavedJokesState {\n  switch (action.type) {\n    case SET_SAVED_JOKES:\n      return {\n        savedJokes: action.jokes\n      };\n    case SAVE_JOKE:\n      return {\n        savedJokes:\n          savedJokes.length < 10\n            ? [...state.savedJokes, action.joke]\n            : [...state.savedJokes.slice(1), action.joke]\n      };\n    case REMOVE_JOKE:\n      return {\n        savedJokes: state.savedJokes.filter((joke) => joke.id !== action.jokeId)\n      };\n\n    case REMOVE_ALL_JOKES:\n      return {\n        savedJokes: []\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  JokesDashboardAction,\n  JokesDashboardState,\n  SET_RANDOM_JOKE\n} from './types';\n\nexport const initialState: JokesDashboardState = {\n  activeJoke: undefined\n};\n\nexport function jokesDashboard(\n  state: JokesDashboardState = initialState,\n  action: JokesDashboardAction\n): JokesDashboardState {\n  switch (action.type) {\n    case SET_RANDOM_JOKE:\n      return {\n        activeJoke: action.joke\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { savedJokes } from '../../../modules/saved-jokes/domain/store/reducer';\nimport { jokesDashboard } from '../../../modules/jokes-dashboard/domain/store/reducer';\n\nexport const rootReducer = combineReducers({\n  savedJokes,\n  jokesDashboard\n});\n\nexport type TRootState = ReturnType<typeof rootReducer>;\n","enum Environments {\n  PRODUCTION = 'production',\n  DEVELOPMENT = 'development'\n}\n\nconst APPLICATION_ENVIRONMENT = process.env.NODE_ENV;\n\nexport function isProductionEnvironment(): boolean {\n  return Environments.PRODUCTION === APPLICATION_ENVIRONMENT;\n}\n\nexport function isDevelopmentEnvironment(): boolean {\n  return Environments.PRODUCTION === APPLICATION_ENVIRONMENT;\n}\n","import { rootReducer, TRootState } from './root-reducer';\nimport { createStore, applyMiddleware, Action } from 'redux';\nimport thunk, { ThunkAction } from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { isProductionEnvironment } from '../../environment/index';\n\nconst middleware = isProductionEnvironment()\n  ? applyMiddleware(thunk)\n  : composeWithDevTools(applyMiddleware(thunk));\n\nexport const store = createStore(rootReducer, middleware);\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  TRootState,\n  unknown,\n  Action<string>\n>;\n","import React, { ReactNode, FC } from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from '../domain/store';\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport const StoreProvider: FC<Props> = ({ children }: Props) => {\n  return <Provider store={store}>{children}</Provider>;\n};\n","import React, { FC } from 'react';\nimport { AppContainer } from './AppContainer';\nimport { GlobalStyles } from './common/presentation/global-styles/styles';\nimport { Router } from './common/presentation/router/Router';\nimport { StoreProvider } from './common/providers/StoreProvider';\n\nexport const App: FC = () => {\n  return (\n    <StoreProvider>\n      <AppContainer>\n        <Router></Router>\n        <GlobalStyles></GlobalStyles>\n      </AppContainer>\n    </StoreProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}